<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>CK资讯网 - devops</title><link href="http://localhost:8000/" rel="alternate"></link><link href="http://localhost:8000/feeds/devops.atom.xml" rel="self"></link><id>http://localhost:8000/</id><updated>2022-07-01T10:00:00+08:00</updated><entry><title>Github Action的用途和使用</title><link href="http://localhost:8000/github-actionde-yong-tu-he-shi-yong.html" rel="alternate"></link><published>2022-07-01T10:00:00+08:00</published><updated>2022-07-01T10:00:00+08:00</updated><author><name></name></author><id>tag:localhost,2022-07-01:/github-actionde-yong-tu-he-shi-yong.html</id><summary type="html">&lt;p&gt;Github Action是基于Github平台提供的持续集成与部署（CI/CD）服务。它可以让开发者在代码仓库中，自定义工作流程来完成代码的自动化构建、测试、部署等工作。&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Github Action的用途&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自动构建 ...&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Github Action是基于Github平台提供的持续集成与部署（CI/CD）服务。它可以让开发者在代码仓库中，自定义工作流程来完成代码的自动化构建、测试、部署等工作。&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Github Action的用途&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自动构建：当代码提交到Github仓库时，自动构建项目并生成可执行程序或打包文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动测试：在代码提交后，运行各种类型的测试，确保代码质量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动部署：将构建好的程序或打包文件自动部署到指定服务器或云平台上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动通知：在构建或部署过程中出现错误或成功时，通过邮件或Slack等方式通知相关人员。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Github Action的使用&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;创建Github Action&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在Github仓库中，创建一个&lt;code&gt;.github/workflows&lt;/code&gt;目录，并在该目录下新建一个YAML文件，命名为任意名称。在该文件中定义工作流程的名称、触发条件、任务等信息。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义工作流程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;工作流程由一个或多个Job组成，每个Job代表一个任务，可以串行或并行执行。在Job中定义步骤（Steps），每个步骤代表一个具体的操作，如构建、测试、部署等。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;运行Github Action&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当代码提交到Github仓库时，Github Action会自动运行定义好的工作流程。可以通过&lt;code&gt;Actions&lt;/code&gt;标签页查看最近一次运行的结果。&lt;/p&gt;
&lt;p&gt;```yaml
name: CI&lt;/p&gt;
&lt;p&gt;on:
  push:
    branches: [ main ]&lt;/p&gt;
&lt;p&gt;jobs:
  build:
    runs-on: ubuntu-latest&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nl"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;checkout&lt;/span&gt;&lt;span class="nv"&gt;@v2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;检出代码&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Go&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="nv"&gt;@v2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;安装Go环境&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nl"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1.16&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;````&lt;/p&gt;
&lt;p&gt;以上是一个简单的示例，当代码提交到main分支时，Github Action会在Ubuntu系统上运行该工作流程，其中包含一个Job，用于检出代码、安装Go环境、构建和测试Go应用程序。&lt;/p&gt;
&lt;p&gt;总之，Github Action是一个非常强大的自动化工具，可以帮助开发者节省大量时间和精力，提高开发效率和代码质量。&lt;/p&gt;
&lt;h2&gt;Github Action的优势&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;集成在Github平台上，无需额外的部署和配置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持多种编程语言和操作系统，可以处理各种类型的项目。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以通过自定义的脚本来满足特定的需求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供了丰富的社区Action库，可快速实现工作流程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以灵活地设置触发条件和执行时机，可以根据具体情况进行调整。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;结论&lt;/h2&gt;
&lt;p&gt;本文介绍了Github Action的用途和使用方法，并提出了它的优势。Github Action是一项非常强大和方便的自动化工具，可以帮助开发者简化工作流程、提高效率和代码质量。我们鼓励读者探索并尝试使用Github Action，从而更好地管理和自动化他们的软件开发过程。&lt;/p&gt;</content><category term="devops"></category><category term="Github"></category><category term="devops"></category><category term="CI/CD"></category><category term="自动化构建"></category><category term="测试"></category></entry><entry><title>使用Github Action自动发布npm包</title><link href="http://localhost:8000/shi-yong-github-actionzi-dong-fa-bu-npmbao.html" rel="alternate"></link><published>2022-07-01T10:00:00+08:00</published><updated>2022-07-01T10:00:00+08:00</updated><author><name></name></author><id>tag:localhost,2022-07-01:/shi-yong-github-actionzi-dong-fa-bu-npmbao.html</id><summary type="html">&lt;p&gt;Github Action是基于Github平台提供的持续集成与部署（CI/CD）服务。它可以让开发者在代码仓库中，自定义工作流程来完成代码的自动化构建、测试、部署等工作。&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Github Action的用途&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自动构建 ...&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Github Action是基于Github平台提供的持续集成与部署（CI/CD）服务。它可以让开发者在代码仓库中，自定义工作流程来完成代码的自动化构建、测试、部署等工作。&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Github Action的用途&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自动构建：当代码提交到Github仓库时，自动构建项目并生成可执行程序或打包文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动测试：在代码提交后，运行各种类型的测试，确保代码质量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动部署：将构建好的程序或打包文件自动部署到指定服务器或云平台上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动通知：在构建或部署过程中出现错误或成功时，通过邮件或Slack等方式通知相关人员。&lt;!--more--&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Github Action的使用&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;创建Github Action&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在Github仓库中，创建一个&lt;code&gt;.github/workflows&lt;/code&gt;目录，并在该目录下新建一个YAML文件，命名为任意名称。在该文件中定义工作流程的名称、触发条件、任务等信息。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义工作流程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;工作流程由一个或多个Job组成，每个Job代表一个任务，可以串行或并行执行。在Job中定义步骤（Steps），每个步骤代表一个具体的操作，如构建、测试、部署等。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;运行Github Action&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当代码提交到Github仓库时，Github Action会自动运行定义好的工作流程。可以通过&lt;code&gt;Actions&lt;/code&gt;标签页查看最近一次运行的结果。&lt;/p&gt;
&lt;p&gt;```yaml
name: CI&lt;/p&gt;
&lt;p&gt;on:
  push:
    branches: [ main ]&lt;/p&gt;
&lt;p&gt;jobs:
  build:
    runs-on: ubuntu-latest&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nl"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;checkout&lt;/span&gt;&lt;span class="nv"&gt;@v2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;检出代码&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Go&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="nv"&gt;@v2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;安装Go环境&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nl"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1.16&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;````&lt;/p&gt;
&lt;p&gt;以上是一个简单的示例，当代码提交到main分支时，Github Action会在Ubuntu系统上运行该工作流程。该工作流程包含一个Job，用于检出代码、安装依赖并发布npm包。&lt;/p&gt;
&lt;h2&gt;测试&lt;/h2&gt;
&lt;p&gt;当代码提交到Github仓库的main分支时，Github Action会自动运行定义好的工作流程。可以通过Actions标签页查看最近一次运行的结果。如果一切正常，您将会在npm registry中看到新版本的npm包已经被成功发布了。&lt;/p&gt;
&lt;p&gt;总之，使用Github Action自动发布npm包能够帮助开发者实现自动化管理和发布，减少手动操作的时间和工作量。此外，Github Action还有很多其他的应用场景，希望本文对您了解Github Action有所帮助。&lt;/p&gt;</content><category term="devops"></category><category term="Github"></category><category term="CI/CD"></category><category term="测试"></category></entry></feed>